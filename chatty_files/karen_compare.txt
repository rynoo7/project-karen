import pygame							import pygame
import sys							import sys
import os							import os
import cv2							import cv2
import time							import time
import subprocess						import subprocess
from datetime import datetime					from datetime import datetime
import threading						import threading

class VideoRecorder(threading.Thread):				class VideoRecorder(threading.Thread):
    def __init__(self, width, height):				    def __init__(self, width, height):
        super().__init__()					        super().__init__()
        self.width = width					        self.width = width
        self.height = height					        self.height = height
        self.running = True					        self.running = True
        self.frames = []					        self.frames = []
        self.start_time = time.time()				        self.start_time = time.time()
        self.duration = 10  # seconds				        self.duration = 10  # seconds
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")	        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        self.output_path = f"/home/ryn007/Programs/Karen/Reco	        self.output_path = f"/home/ryn007/Programs/Karen/Reco
        fourcc = cv2.VideoWriter_fourcc(*'mp4v')		        fourcc = cv2.VideoWriter_fourcc(*'mp4v')
        self.out = cv2.VideoWriter(self.output_path, fourcc, 	        self.out = cv2.VideoWriter(self.output_path, fourcc, 

    def run(self):						    def run(self):
        target_fps = 20.0				      <
        interval = 1.0 / target_fps			      <
        next_frame_time = time.time()			      <
							      <
        while self.running and (time.time() - self.start_time	        while self.running and (time.time() - self.start_time
            now = time.time()				      |	            if current_frame is not None:
            if current_frame is not None and now >= next_fram <
                frame_resized = cv2.resize(current_frame, (se	                frame_resized = cv2.resize(current_frame, (se
                self.out.write(frame_resized)			                self.out.write(frame_resized)
                next_frame_time += interval		      |	            time.sleep(1/20.0)  # Simulate ~20 FPS
            else:					      <
                time.sleep(0.005)			      <

        self.out.release()					        self.out.release()
        print(f"[Karen] Video saved: {self.output_path}")	        print(f"[Karen] Video saved: {self.output_path}")

							      >	    def stop(self):
							      >	        self.running = False
							      >
							      >
# Initialize Pygame and OpenCV					# Initialize Pygame and OpenCV
pygame.init()							pygame.init()

							      >	# Webcam capture setup
cap = cv2.VideoCapture(0)					cap = cv2.VideoCapture(0)
cap.set(cv2.CAP_PROP_FRAME_WIDTH, 320)				cap.set(cv2.CAP_PROP_FRAME_WIDTH, 320)
cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 240)				cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 240)

							      >	# Screen and image loading
info = pygame.display.Info()					info = pygame.display.Info()
screen_width, screen_height = info.current_w, info.current_h	screen_width, screen_height = info.current_w, info.current_h
screen = pygame.display.set_mode((screen_width, screen_height	screen = pygame.display.set_mode((screen_width, screen_height
pygame.display.set_caption("Karen's Living Memory")		pygame.display.set_caption("Karen's Living Memory")

							      >	# Load and scale panoramic image
image_path = "/home/ryn007/Programs/Karen/Photos/GARAGE.jpg"	image_path = "/home/ryn007/Programs/Karen/Photos/GARAGE.jpg"
background = pygame.image.load(image_path).convert()		background = pygame.image.load(image_path).convert()
img_width, img_height = background.get_size()			img_width, img_height = background.get_size()
scale_factor = screen_height / img_height			scale_factor = screen_height / img_height
scaled_width = int(img_width * scale_factor)			scaled_width = int(img_width * scale_factor)
scaled_image = pygame.transform.scale(background, (scaled_wid	scaled_image = pygame.transform.scale(background, (scaled_wid

							      >	# Define scroll range
scroll_x = 0							scroll_x = 0
max_scroll_x = scaled_width - screen_width			max_scroll_x = scaled_width - screen_width
							      >
							      >	# Define where the webcam feed goes in the image (image coord
LIVE_FEED_RECT = pygame.Rect(4295, 380, 355, 220)		LIVE_FEED_RECT = pygame.Rect(4295, 380, 355, 220)

							      >	# Define interactive zones
zones = [							zones = [
    (pygame.Rect(3498, 647, 260, 400), "/home/ryn007/Programs	    (pygame.Rect(3498, 647, 260, 400), "/home/ryn007/Programs
    (pygame.Rect(4376, 670, 185, 265), "/home/ryn007/Programs	    (pygame.Rect(4376, 670, 185, 265), "/home/ryn007/Programs
							      >	    
    (pygame.Rect(4415, 320, 115, 60), "snapshot"),		    (pygame.Rect(4415, 320, 115, 60), "snapshot"),
    (pygame.Rect(4300, 390, 350, 200), "python3 /home/ryn007/	    (pygame.Rect(4300, 390, 350, 200), "python3 /home/ryn007/
							      >	    
							      >	    #(pygame.Rect(4705, 20, 760, 1050), "/home/ryn007/Program
    (pygame.Rect(4705, 20, 760, 1050), "/home/ryn007/Projects	    (pygame.Rect(4705, 20, 760, 1050), "/home/ryn007/Projects
							      >
							      >	    #Active Projects Box
    (pygame.Rect(3232, 868, 218, 17), "/home/ryn007/Programs/	    (pygame.Rect(3232, 868, 218, 17), "/home/ryn007/Programs/
							      >
    (pygame.Rect(3188, 550, 280, 150), "/home/ryn007/Programs	    (pygame.Rect(3188, 550, 280, 150), "/home/ryn007/Programs
    (pygame.Rect(2800, 530, 395, 230), "/home/ryn007/Programs	    (pygame.Rect(2800, 530, 395, 230), "/home/ryn007/Programs
    (pygame.Rect(1970, 490, 530, 450), "/home/ryn007/Programs	    (pygame.Rect(1970, 490, 530, 450), "/home/ryn007/Programs
    (pygame.Rect(145, 612, 185, 270), "/home/ryn007/Programs/	    (pygame.Rect(145, 612, 185, 270), "/home/ryn007/Programs/
    (pygame.Rect(4000, 300, 300, 200), "play_video:/home/ryn0 <
]								]

current_frame = None					      <
playing_video = False					      <
video_cap = None					      <
							      <
running = True							running = True
while running:							while running:
    mouse_x, mouse_y = pygame.mouse.get_pos()			    mouse_x, mouse_y = pygame.mouse.get_pos()
    scroll_x = int((mouse_x / screen_width) * max_scroll_x)	    scroll_x = int((mouse_x / screen_width) * max_scroll_x)

    for event in pygame.event.get():				    for event in pygame.event.get():
        if event.type == pygame.QUIT:				        if event.type == pygame.QUIT:
            running = False					            running = False
        elif event.type == pygame.KEYDOWN and event.key == py	        elif event.type == pygame.KEYDOWN and event.key == py
            running = False					            running = False
        elif event.type == pygame.MOUSEBUTTONDOWN and event.b	        elif event.type == pygame.MOUSEBUTTONDOWN and event.b
            image_x = scroll_x + mouse_x			            image_x = scroll_x + mouse_x
            image_y = mouse_y					            image_y = mouse_y
            for rect, path in zones:				            for rect, path in zones:
                if rect.collidepoint(image_x, image_y):		                if rect.collidepoint(image_x, image_y):
                    if path.startswith("play_video:"):	      |	                    if "record_video" in path:
                        video_path = path.split(":", 1)[1]    |	                        print("[Karen] Recording video from l
                        print(f"[Karen] Playing memory: {vide |	                        timestamp = datetime.now().strftime("
                        playing_video = True		      |	                        video_path = f"/home/ryn007/Programs/
                        # Start audio playback in background  |	                        audio_path = f"/home/ryn007/Programs/
                        audio_proc = subprocess.Popen(	      |	                        output_path = f"/home/ryn007/Programs
                            ["ffplay", "-nodisp", "-autoexit" <
                            stdout=subprocess.DEVNULL,	      <
                            stderr=subprocess.DEVNULL	      <
                        )				      <
							      <
                        video_cap = cv2.VideoCapture(video_pa <
							      <
                    elif "record_video" in path:	      <
                        print("[Karen] Starting background vi <
                        audio_timestamp = datetime.now().strf <
                        audio_path = f"/home/ryn007/Programs/ <

							      >	                        # Start recording audio in the backgr
                        audio_proc = subprocess.Popen(		                        audio_proc = subprocess.Popen(
                            ["ffmpeg", "-f", "alsa", "-i", "d	                            ["ffmpeg", "-f", "alsa", "-i", "d
                            stdout=subprocess.DEVNULL,		                            stdout=subprocess.DEVNULL,
                            stderr=subprocess.DEVNULL		                            stderr=subprocess.DEVNULL
                        )					                        )

                        recorder = VideoRecorder(screen_width |	                        # Record video with OpenCV
                        recorder.start()		      |	                        fourcc = cv2.VideoWriter_fourcc(*'mp4
							      >	                        out = cv2.VideoWriter(video_path, fou
							      >	                        start_time = time.time()
							      >	                        while time.time() - start_time < 10:
							      >	                            ret, frame = cap.read()
							      >	                            if not ret:
							      >	                                break
							      >	                            frame_resized = cv2.resize(frame,
							      >	                            out.write(frame_resized)
							      >	                            pygame.event.pump()
							      >	                        out.release()
							      >	                        print("[Karen] Video capture complete
							      >
							      >	                        audio_proc.wait()
							      >	                        print("[Karen] Audio capture complete
							      >
							      >	                        # Combine audio + video
							      >	                        subprocess.run([
							      >	                            "ffmpeg",
							      >	                            "-y",  # Overwrite if needed
							      >	                            "-i", video_path,
							      >	                            "-i", audio_path,
							      >	                            "-c:v", "copy",
							      >	                            "-c:a", "aac",
							      >	                            output_path
							      >	                        ])
							      >
							      >	                        # Clean up separate audio/video files
							      >	                        os.remove(video_path)
							      >	                        os.remove(audio_path)

                        def merge_after_delay():	      |	                        print(f"[Karen] Memory saved to: {out
                            recorder.join()		      <
                            audio_proc.wait()		      <
                            print("[Karen] Merging audio and  <
                            merged_path = f"/home/ryn007/Prog <
                            subprocess.run([		      <
                                "ffmpeg", "-y",		      <
                                "-i", recorder.output_path,   <
                                "-i", audio_path,	      <
                                "-c:v", "copy",		      <
                                "-c:a", "aac",		      <
                                merged_path		      <
                            ])				      <
                            os.remove(recorder.output_path)   <
                            os.remove(audio_path)	      <
                            print(f"[Karen] Memory complete:  <

                        threading.Thread(target=merge_after_d <

                    elif path == "snapshot" and current_frame |	                    elif "snapshot" in path and current_frame
                        timestamp = datetime.now().strftime("	                        timestamp = datetime.now().strftime("
                        filename = f"/home/ryn007/Programs/Ka	                        filename = f"/home/ryn007/Programs/Ka
                        cv2.imwrite(filename, current_frame)	                        cv2.imwrite(filename, current_frame)
                        print(f"[Karen] Snapshot saved: {file	                        print(f"[Karen] Snapshot saved: {file
							      >
                    elif path.endswith(".sh") or path.endswit	                    elif path.endswith(".sh") or path.endswit
                        subprocess.Popen(path, shell=True)	                        subprocess.Popen(path, shell=True)
                        print(f"[Karen] Running script: {path	                        print(f"[Karen] Running script: {path
							      >
                    else:					                    else:
                        os.system(f"xdg-open '{path}'")		                        os.system(f"xdg-open '{path}'")

							      >
							      >
							      >	    # Draw scrolling panorama
    viewport = scaled_image.subsurface((scroll_x, 0, screen_w	    viewport = scaled_image.subsurface((scroll_x, 0, screen_w
    screen.blit(viewport, (0, 0))				    screen.blit(viewport, (0, 0))

    hover_color = (0, 255, 255, 100)			      |	    # Hover effect
							      >	    hover_color = (0, 255, 255, 100)  # Cyan with alpha
    for rect, _ in zones:					    for rect, _ in zones:
        if rect.collidepoint(scroll_x + mouse_x, mouse_y):	        if rect.collidepoint(scroll_x + mouse_x, mouse_y):
            draw_rect = pygame.Rect(rect.x - scroll_x, rect.y	            draw_rect = pygame.Rect(rect.x - scroll_x, rect.y
            hover_surface = pygame.Surface((rect.width, rect.	            hover_surface = pygame.Surface((rect.width, rect.
            hover_surface.fill(hover_color)			            hover_surface.fill(hover_color)
            screen.blit(hover_surface, (draw_rect.x, draw_rec	            screen.blit(hover_surface, (draw_rect.x, draw_rec

    draw_x = LIVE_FEED_RECT.x - scroll_x		      |	    # Webcam feed
    draw_y = LIVE_FEED_RECT.y				      |	    ret, frame = cap.read()
							      |	    current_frame = frame.copy() if ret else None
    if playing_video and video_cap is not None:		      |	    
        success, vid_frame = video_cap.read()		      |	    if ret:
        if success:					      |	        frame = cv2.flip(frame, 1)
            fps = video_cap.get(cv2.CAP_PROP_FPS) or 30  # fa |	        frame = cv2.resize(frame, (LIVE_FEED_RECT.width, LIVE
            vid_frame = cv2.resize(vid_frame, (LIVE_FEED_RECT |	        frame_surface = pygame.image.frombuffer(frame.tobytes
            vid_frame = cv2.cvtColor(vid_frame, cv2.COLOR_BGR |	        screen.blit(frame_surface, (LIVE_FEED_RECT.x - scroll
            vid_surface = pygame.image.frombuffer(vid_frame.t <
            screen.blit(vid_surface, (draw_x, draw_y))	      <
            pygame.display.flip()			      <
            time.sleep(1 / fps)				      <
							      <
        else:						      <
            print("[Karen] Finished playing video.")	      <
            playing_video = False			      <
            video_cap.release()				      <
            video_cap = None				      <
    else:						      <
        ret, frame = cap.read()				      <
        current_frame = frame.copy() if ret else None	      <
        if ret:						      <
            frame = cv2.flip(frame, 1)			      <
            frame = cv2.resize(frame, (LIVE_FEED_RECT.width,  <
            frame_surface = pygame.image.frombuffer(frame.tob <
            screen.blit(frame_surface, (draw_x, draw_y))      <

    pygame.display.flip()					    pygame.display.flip()

							      >	# Cleanup
cap.release()							cap.release()
pygame.quit()							pygame.quit()
sys.exit()							sys.exit()
